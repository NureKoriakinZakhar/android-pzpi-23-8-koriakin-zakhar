Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії







ЗВІТ
до лабораторної роботи 5 з дисципліни
"Програмування під Android"
на тему "Створення нотаток" 







Виконав ст. гр ПЗПІ-23-8
Корякін Захар Павлович


Перевірив 
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2024

МЕТА
     
    Метою цієї лабораторної роботи є ознайомити студентів з основами розробки мобільних додатків для платформи Android, зокрема, з використанням різних функцій інтерфейсу та налаштувань додатка. Студенти повинні навчитися реалізовувати різне відображення для портретної та ландшафтної орієнтації екрану, створювати та застосовувати редаговані теми інтерфейсу, а також додавати можливість змінювати розмір шрифтів через налаштування програми. Додатково, студенти повинні розробити функціонал для збереження даних нотаток у базі даних SQLite, що дозволить забезпечити збереження та редагування нотаток.

ЗАВДАННЯ

Доповнити завдання №4 наступними функціями:
* реалізувати різне відображення для портретної та ланшафтної орієнтації екрану за допомогою тих самих фрагментів;
* створити дві редаговані теми (тло, гарнітура шрифту, колір тексту тощо) і застосовувати їх в залежності від налаштувань програми.
* додати можливість задавати в налаштуваннях програми розмір шрифту.

Переробити завдання №4 так, щоб дані нотаток зберігалися у базі даних SQLite


ХІД РОБОТИ

DatabaseHelper.java
Клас DatabaseHelper відповідає за управління базою даних SQLite в додатку. Він обробляє створення, оновлення та видалення таблиці нотаток, а також надає методи для додавання, оновлення, отримання та видалення нотаток з бази даних. Метод onCreate() створює базу даних і таблицю для зберігання нотаток. Таблиця містить стовпці для ID, заголовка, опису, важливості, дати/часу та URI зображення. Метод onUpgrade() викликається при оновленні версії бази даних і видаляє існуючу таблицю нотаток, створюючи нову. Метод addNote() додає нову нотатку до бази даних, приймаючи параметри, такі як заголовок, опис, важливість, дата/час та URI зображення, і повертає ID нової нотатки. Метод getAllNotes() отримує всі нотатки з бази даних і повертає їх у вигляді списку об'єктів Note, виконуючи запит до бази даних і перетворюючи результат у об'єкти Note, враховуючи URI зображення. Метод updateNote() оновлює існуючу нотатку в базі даних, приймаючи ID нотатки та нові значення для заголовка, опису, важливості, дати/часу та URI зображення та оновлює відповідний запис. Метод deleteNote() видаляє нотатку з бази даних за її ID. Метод deleteAllNotes() видаляє всі нотатки з бази даних [див. Додаток А].

SettingsActivity.java
Клас SettingsActivity відповідає за екран налаштувань додатку, де користувач може змінювати тему інтерфейсу (світла або темна) та налаштовувати розмір шрифта. У методі onCreate() ініціалізуються елементи інтерфейсу, такі як група радіокнопок для вибору теми (themeGroup) та повзунок для зміни розміру шрифта (fontSizeSeekBar). Далі завантажуються попередньо збережені налаштування користувача з SharedPreferences і застосовуються поточні налаштування. Для вибору теми додається слухач, який оновлює налаштування теми в SharedPreferences, перезапускає активність і відправляє новий Intent до MainActivity. Для зміни розміру шрифта додається слухач до повзунка, який зберігає нове значення в SharedPreferences. Метод applyTheme() застосовує вибрану тему залежно від збережених налаштувань. У методі onOptionsItemSelected() обробляється натискання кнопки "Назад" у верхньому меню, що дозволяє повернутися до попереднього екрану [див. Додаток Б].

activity_settings.xml
Цей XML-файл описує інтерфейс екрану налаштувань для вибору теми та розміру шрифта. Весь інтерфейс обгорнутий в контейнер LinearLayout, який розташовує елементи вертикально з відступами по 16dp. Перший елемент — це TextView, що відображає заголовок "Theme", який має розмір шрифта 18sp і відступ знизу 8dp. Далі йде RadioGroup, який містить дві радіокнопки: одна для вибору світлої теми ("Light Theme") і інша для темної теми ("Dark Theme"). Після цього знаходиться ще один TextView, який містить заголовок "Font Size", має розмір шрифта 18sp, верхній відступ 16dp і нижній відступ 8dp. Потім розташовано SeekBar, який дозволяє змінювати розмір шрифта. Цей повзунок має максимальне значення 12, що відповідає максимальному розміру шрифта 24sp, і початкове значення 2, що означає розмір шрифта 14sp. Останній елемент — це TextView, що відображає поточне значення шрифта (14sp) і вирівняний по центру екрана, щоб показувати користувачу, який розмір шрифта вибраний [див. Додаток В].

ВИСНОВКИ
     
     Посилання на відео в YouTube: https://youtu.be/2MeCmiv-NLs
     
     В ході виконання лабораторної роботи я удосконалив свої навички розробки мобільного додатка для платформи Android. Я реалізував функціональність для відображення інтерфейсу в залежності від орієнтації екрану, створив дві редаговані теми, що дозволяють змінювати тло, гарнітуру шрифтів і колір тексту, а також додав можливість налаштовувати розмір шрифта через налаштування програми. Крім того, я переробив додаток для збереження даних нотаток у базі даних SQLite, що дозволило забезпечити збереження інформації між сесіями користувача.

ВИКОРИСТАННІ ДЖЕРЕЛА

1. YouTube. " Як Зробити Android Додаток з Нуля" https://www.youtube.com/watch?v=p0tmWQIKk4g. Дата доступу: 24 грудня 2024 року.
2. Національний університет радіоелектроніки. https://dl.nure.ua/. Дата доступу: 24 грудня 2024 року.






























ДОДАТОК А
Файл DatabaseHelper.java

1   package com.example.zakhar_koryakin_pzpi_23_8;
2   
3   import android.content.ContentValues;
4   import android.content.Context;
5   import android.database.Cursor;
6   import android.database.sqlite.SQLiteDatabase;
7   import android.database.sqlite.SQLiteOpenHelper;
8   import android.net.Uri;
9   
10   import java.util.ArrayList;
11   import java.util.List;
12   
13   public class DatabaseHelper extends SQLiteOpenHelper {
14   
15       private static final String DATABASE_NAME = "notes.db";
16       private static final int DATABASE_VERSION = 1;
17       public static final String TABLE_NOTES = "notes";
18       public static final String COLUMN_ID = "id";
19       public static final String COLUMN_TITLE = "title";
20       public static final String COLUMN_DESCRIPTION = "description";
21       public static final String COLUMN_IMPORTANCE = "importance";
22       public static final String COLUMN_DATE_TIME = "dateTime";
23       public static final String COLUMN_IMAGE_URI = "imageUri";
24   
25       public DatabaseHelper(Context context) {
26           super(context, DATABASE_NAME, null, DATABASE_VERSION);
27       }
28   
29       @Override
30       public void onCreate(SQLiteDatabase db) {
31           String createTableQuery = "CREATE TABLE " + TABLE_NOTES + " ("
32                   + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
33                   + COLUMN_TITLE + " TEXT, "
34                   + COLUMN_DESCRIPTION + " TEXT, "
35                   + COLUMN_IMPORTANCE + " INTEGER, "
36                   + COLUMN_DATE_TIME + " TEXT, "
37                   + COLUMN_IMAGE_URI + " TEXT)";
38           db.execSQL(createTableQuery);
39       }
40   
41       @Override
42       public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
43           db.execSQL("DROP TABLE IF EXISTS " + TABLE_NOTES);
44           onCreate(db);
45       }
46   
47       public long addNote(String title, String description, int importance, String dateTime, String imageUri) {
48           SQLiteDatabase db = this.getWritableDatabase();
49           ContentValues values = new ContentValues();
50           values.put(COLUMN_TITLE, title);
51           values.put(COLUMN_DESCRIPTION, description);
52           values.put(COLUMN_IMPORTANCE, importance);
53           values.put(COLUMN_DATE_TIME, dateTime);
54           values.put(COLUMN_IMAGE_URI, imageUri);
55   
56           long id = db.insert(TABLE_NOTES, null, values);
57           db.close();
58           return id;
59       }
60   
61       public List<Note> getAllNotes() {
62           List<Note> notesList = new ArrayList<>();
63           SQLiteDatabase db = this.getReadableDatabase();
64           Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_NOTES, null);
65   
66           if (cursor != null && cursor.moveToFirst()) {
67               do {
68                   int idIndex = cursor.getColumnIndex(COLUMN_ID);
69                   int titleIndex = cursor.getColumnIndex(COLUMN_TITLE);
70                   int descriptionIndex = cursor.getColumnIndex(COLUMN_DESCRIPTION);
71                   int importanceIndex = cursor.getColumnIndex(COLUMN_IMPORTANCE);
72                   int dateTimeIndex = cursor.getColumnIndex(COLUMN_DATE_TIME);
73                   int imageUriIndex = cursor.getColumnIndex(COLUMN_IMAGE_URI);
74   
75                   if (idIndex != -1 && titleIndex != -1 && descriptionIndex != -1 &&
76                           importanceIndex != -1 && dateTimeIndex != -1 && imageUriIndex != -1) {
77   
78                       long id = cursor.getLong(idIndex);
79                       String title = cursor.getString(titleIndex);
80                       String description = cursor.getString(descriptionIndex);
81                       int importance = cursor.getInt(importanceIndex);
82                       String dateTime = cursor.getString(dateTimeIndex);
83                       String imageUriString = cursor.getString(imageUriIndex);
84   
85                       Uri imageUri = null;
86                       if (imageUriString != null && !imageUriString.isEmpty()) {
87                           try {
88                               imageUri = Uri.parse(imageUriString);
89                           } catch (Exception e) {
90                               e.printStackTrace();
91                           }
92                       }
93   
94                       Note note = new Note(id, title, description, importance, dateTime, imageUri);
95                       notesList.add(note);
96                   }
97   
98               } while (cursor.moveToNext());
99   
100              cursor.close();
101          }
102          db.close();
103          return notesList;
104      }
105  
106      public int updateNote(long id, String title, String description, int importance, String dateTime, String imageUri) {
107          SQLiteDatabase db = this.getWritableDatabase();
108          ContentValues values = new ContentValues();
109          values.put(COLUMN_TITLE, title);
110          values.put(COLUMN_DESCRIPTION, description);
111          values.put(COLUMN_IMPORTANCE, importance);
112          values.put(COLUMN_DATE_TIME, dateTime);
113          values.put(COLUMN_IMAGE_URI, imageUri);
114  
115          int rowsAffected = db.update(TABLE_NOTES, values, COLUMN_ID + " = ?", new String[]{String.valueOf(id)});
116          db.close();
117          return rowsAffected;
118      }
119  
120      public void deleteNote(long id) {
121          SQLiteDatabase db = this.getWritableDatabase();
122          db.delete(TABLE_NOTES, COLUMN_ID + " = ?", new String[]{String.valueOf(id)});
123          db.close();
124      }
125  
126      public void deleteAllNotes() {
127          SQLiteDatabase db = this.getWritableDatabase();
128          db.delete(TABLE_NOTES, null, null);
129          db.close();
130      }
131  }

































































ДОДАТОК Б
Файл SettingsActivity.java

1   package com.example.zakhar_koryakin_pzpi_23_8;
2   
3   import android.content.Intent;
4   import android.os.Bundle;
5   import android.view.MenuItem;
6   import android.widget.RadioGroup;
7   import android.widget.SeekBar;
8   import androidx.appcompat.app.AppCompatActivity;
9   import androidx.appcompat.app.AppCompatDelegate;
10   import android.content.SharedPreferences;
11   import android.preference.PreferenceManager;
12   
13   public class SettingsActivity extends AppCompatActivity {
14       private SharedPreferences preferences;
15       private RadioGroup themeGroup;
16       private SeekBar fontSizeSeekBar;
17   
18       @Override
19       protected void onCreate(Bundle savedInstanceState) {
20           preferences = PreferenceManager.getDefaultSharedPreferences(this);
21           applyTheme();
22           super.onCreate(savedInstanceState);
23           setContentView(R.layout.activity_settings);
24   
25           getSupportActionBar().setDisplayHomeAsUpEnabled(true);
26   
27           themeGroup = findViewById(R.id.themeGroup);
28           fontSizeSeekBar = findViewById(R.id.fontSizeSeekBar);
29   
30           int currentTheme = preferences.getInt("theme", 0);
31           int fontSize = preferences.getInt("fontSize", 14);
32   
33           themeGroup.check(currentTheme == 0 ? R.id.themeLight : R.id.themeDark);
34   
35           fontSizeSeekBar.setProgress(fontSize - 12);
36   
37           themeGroup.setOnCheckedChangeListener((group, checkedId) -> {
38               int theme = checkedId == R.id.themeLight ? 0 : 1;
39               preferences.edit().putInt("theme", theme).apply();
40   
41               recreate();
42   
43               Intent intent = new Intent(this, MainActivity.class);
44               intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
45               startActivity(intent);
46               finish();
47           });
48   
49           fontSizeSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
50               @Override
51               public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
52                   int fontSize = progress + 12;
53                   preferences.edit().putInt("fontSize", fontSize).apply();
54               }
55   
56               @Override
57               public void onStartTrackingTouch(SeekBar seekBar) {}
58   
59               @Override
60               public void onStopTrackingTouch(SeekBar seekBar) {}
61           });
62       }
63   
64       private void applyTheme() {
65           int theme = preferences.getInt("theme", 0);
66           if (theme == 0) {
67               setTheme(R.style.Theme_Light);
68           } else {
69               setTheme(R.style.Theme_Dark);
70           }
71       }
72   
73       @Override
74       public boolean onOptionsItemSelected(MenuItem item) {
75           if (item.getItemId() == android.R.id.home) {
76               onBackPressed();
77               return true;
78           }
79           return super.onOptionsItemSelected(item);
80       }
81   }






























































ДОДАТОК В
Файл activity_settings.xml

1  <?xml version="1.0" encoding="utf-8"?>
2  <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
3      android:layout_width="match_parent"
4      android:layout_height="match_parent"
5      android:orientation="vertical"
6      android:padding="16dp">
7  
8      <TextView
9          android:layout_width="wrap_content"
10          android:layout_height="wrap_content"
11          android:text="Theme"
12          android:textSize="18sp"
13          android:layout_marginBottom="8dp"/>
14  
15      <RadioGroup
16          android:id="@+id/themeGroup"
17          android:layout_width="match_parent"
18          android:layout_height="wrap_content"
19          android:orientation="vertical">
20  
21          <RadioButton
22              android:id="@+id/themeLight"
23              android:layout_width="wrap_content"
24              android:layout_height="wrap_content"
25              android:text="Light Theme"/>
26  
27          <RadioButton
28              android:id="@+id/themeDark"
29              android:layout_width="wrap_content"
30              android:layout_height="wrap_content"
31              android:text="Dark Theme"/>
32      </RadioGroup>
33  
34      <TextView
35          android:layout_width="wrap_content"
36          android:layout_height="wrap_content"
37          android:text="Font Size"
38          android:textSize="18sp"
39          android:layout_marginTop="16dp"
40          android:layout_marginBottom="8dp"/>
41  
42      <SeekBar
43          android:id="@+id/fontSizeSeekBar"
44          android:layout_width="match_parent"
45          android:layout_height="wrap_content"
46          android:max="12"
47          android:progress="2"/>
48  
49      <TextView
50          android:id="@+id/fontSizeValue"
51          android:layout_width="wrap_content"
52          android:layout_height="wrap_content"
53          android:layout_gravity="center_horizontal"
54          android:text="14sp"
55          android:layout_marginTop="8dp"/>
56  
57  </LinearLayout>
2


